name: Create Release and Publish to PyPI
on:
  push:
    branches:
      - master  # or main, depending on your default branch name
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    
    - name: Get version
      id: get_version
      run: echo "VERSION=$(python setup.py --version)" >> $GITHUB_ENV
    
    - name: Build package
      run: python setup.py sdist bdist_wheel
    
    - name: Delete existing tag and release if exists
      id: delete_tag_release
      run: |
        TAG_NAME="v${{ env.VERSION }}"
        echo "TAG_NAME=${TAG_NAME}"
        
        # Delete existing release
        RELEASE_ID=$(gh release list --json name,id | jq -r ".[] | select(.name == \"Release ${TAG_NAME}\") | .id")
        if [ -n "$RELEASE_ID" ]; then
          echo "Deleting release with ID: $RELEASE_ID"
          gh release delete $RELEASE_ID --confirm
        fi
        
        # Delete existing tag
        git tag -d $TAG_NAME || true
        git push origin --delete $TAG_NAME || true
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false
    
    - name: Upload artifact to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/cryptonitbot-${{ env.VERSION }}-py3-none-any.whl
        asset_name: cryptonitbot-${{ env.VERSION }}-py3-none-any.whl
        asset_content_type: application/octet-stream
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload dist/*
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: python-distribution
        path: dist/*
