import os
import telebot
from telebot import logging, types
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding, hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64
import uuid
import logging

# –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('YOUR_BOT_TOKEN')

if BOT_TOKEN is None:
    raise ValueError("No bot token provided. Please set the YOUR_BOT_TOKEN environment variable.")

print(f"Bot token: {BOT_TOKEN}")  # Debug print

bot = telebot.TeleBot(BOT_TOKEN)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–ª—é—á–∞ –∑ –ø–∞—Ä–æ–ª—è
def generate_key(password, salt):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
def encrypt(message, password):
    backend = default_backend()
    salt = os.urandom(16)
    key = generate_key(password, salt)
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
    encryptor = cipher.encryptor()
    padder = padding.PKCS7(128).padder()
    padded_data = padder.update(message.encode()) + padder.finalize()
    ciphertext = encryptor.update(padded_data) + encryptor.finalize()
    return base64.b64encode(salt + iv + ciphertext).decode('utf-8')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
def decrypt(encrypted_message, password):
    backend = default_backend()
    encrypted = base64.b64decode(encrypted_message.encode('utf-8'))
    salt = encrypted[:16]
    iv = encrypted[16:32]
    key = generate_key(password, salt)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=backend)
    decryptor = cipher.decryptor()
    unpadder = padding.PKCS7(128).unpadder()
    plaintext_padded = decryptor.update(encrypted[32:]) + decryptor.finalize()
    plaintext = unpadder.update(plaintext_padded) + unpadder.finalize()
    return plaintext.decode('utf-8')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —É —Ä–µ–∂–∏–º—ñ MarkdownV2
def escape_markdown_v2(text):
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def create_main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    encrypt_button = types.KeyboardButton("/encryptüîí")
    decrypt_button = types.KeyboardButton("/decryptüîì")
    help_button = types.KeyboardButton("/start‚ÑπÔ∏è")
    markup.add(encrypt_button, decrypt_button, help_button)
    return markup

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start –∞–±–æ HELP
@bot.message_handler(commands=['start‚ÑπÔ∏è', 'start', 'help'])
def send_welcome(message):
    response = f"üëã –í—ñ—Ç–∞—é, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è/–¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –Ω–∏–∂—á–µ –∞–±–æ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è:\n\n" \
               "üîí /encrypt –∞–±–æ /e - –®–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n" \
               "üîì /decrypt –∞–±–æ /d - –î–µ—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n" \
               "‚ÑπÔ∏è /start –∞–±–æ /help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É\n" \
               "üëã /hello - –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n" \
               "–ù–µ –∑–∞–±—É–¥—å—Ç–µ, —â–æ –±–µ–∑–ø–µ–∫–∞ –≤–∞—à–æ–≥–æ –ø–∞—Ä–æ–ª—é –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞! –ù—ñ–∫–æ–ª–∏ –Ω–µ –¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –ø–∞—Ä–æ–ª–µ–º –∑ —ñ–Ω—à–∏–º–∏ –ª—é–¥—å–º–∏."
    bot.reply_to(message, response, reply_markup=create_main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /hello
@bot.message_handler(commands=['hello'])
def hello_command(message):
    response = f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –∞–±–æ –¥–µ—à–∏—Ñ—Ä—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /help –∞–±–æ /start."
    bot.reply_to(message, response, reply_markup=create_main_menu())

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /encrypt
@bot.message_handler(commands=['encryptüîí', 'e'])
def encrypt_command(message):
    bot.reply_to(message, "üîí –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    bot.register_next_step_handler(message, get_password_for_encryption)

def get_password_for_encryption(message):
    password = message.text
    bot.reply_to(message, "üìß –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    bot.register_next_step_handler(message, lambda msg: encrypt_message(msg, password))

def encrypt_message(message, password):
    text = message.text
    encrypted = encrypt(text, password)
    escaped_encrypted = escape_markdown_v2(encrypted)
    bot.reply_to(message, f"üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{escaped_encrypted}", reply_markup=create_main_menu())

    # Save the encrypted message and password to a file
    file_path = "Crypt.txt"
    instructions_path = "Instructions.txt"
    save_encrypted_message(encrypted, password, file_path, instructions_path)

    # Send the file as a document
    with open(file_path, 'rb') as file:
        bot.send_document(message.chat.id, file, caption="üîê –í–∞—à–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", reply_markup=create_main_menu())

def save_encrypted_message(encrypted_message, password, file_path, instructions_path):
    try:
        with open(file_path, 'w') as file:
            file.write(f"Password: {password}\n\nEncrypted Message:\n{encrypted_message}\n\n")
            # Append instructions from Instructions.txt
            if os.path.exists(instructions_path):
                with open(instructions_path, 'r') as instructions_file:
                    file.write(instructions_file.read())
            else:
                logging.warning(f"Instructions file not found: {instructions_path}")
        logging.debug(f"Encrypted message and password saved to: {file_path}")
    except Exception as e:
        logging.error(f"Failed to save encrypted message and password: {e}")

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /decrypt
# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /decrypt
@bot.message_handler(commands=['decryptüîì', 'decrypt', 'd'])
def decrypt_command(message):
    bot.reply_to(message, "üîì –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    bot.register_next_step_handler(message, get_password_for_decryption)

def get_password_for_decryption(message):
    password = message.text
    bot.reply_to(message, "üìß –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è:")
    bot.register_next_step_handler(message, lambda msg: decrypt_message(msg, password))


def decrypt_message(message, password):
    encrypted_text = message.text
    try:
        decrypted = decrypt(encrypted_text, password)
        escaped_message = escape_markdown_v2(decrypted)
        bot.reply_to(message, f"üîì –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n||{escaped_message}||", parse_mode='MarkdownV2', reply_markup=create_main_menu())

        # Save only if decryption is successful
        file_path = "Decrypted.txt"
        save_decrypted_message(decrypted, password, file_path)

        # Send the file as a document
        with open(file_path, 'rb') as file:
            bot.send_document(message.chat.id, file, caption="üîì –í–∞—à–µ —Ä–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", reply_markup=create_main_menu())
    except Exception as e:
        escaped_error = escape_markdown_v2(str(e))
        bot.reply_to(message, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–µ—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è: {escaped_error}. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.", reply_markup=create_main_menu())

def save_decrypted_message(decrypted_message, password, file_path):
    try:
        with open(file_path, 'w') as file:
            file.write(f"Password: {password}\n\nDecrypted Message:\n{decrypted_message}")
        logging.debug(f"Decrypted message and password saved to: {file_path}")
    except Exception as e:
        logging.error(f"Failed to save decrypted message and password: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
